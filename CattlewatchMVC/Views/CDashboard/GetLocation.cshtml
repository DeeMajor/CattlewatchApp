@model CattlewatchMVC.Models.Location
@{
    /**/

    ViewBag.Title = "GetLocation";
    Layout = "~/Views/Shared/_Clayout.cshtml";
}

 @using (Html.BeginForm("Location", "CDashboard", FormMethod.Post))
 {
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Animal Location</h6>
            </div>
            <div class="card-body">
                <div class="col-md-6">
                    <table class="table" id="address">
                        <tr>
                            <th style="width:110px">Enter Address</th>
                            <td>
                                <div id="locationField">
                                    <input id="autocomplete"
                                           placeholder="Enter address"
                                           onFocus="geolocate()"
                                           type="text"
                                           class="form-control" required="required" />
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th>Street Number</th>
                            <td><input class="form-control" id="street_number" name="street_number" disabled="true" /></td>
                        </tr>
                        <tr>
                            <th>Street Name</th>
                            <td><input class="form-control" id="route" name="route" disabled="true" /></td>
                        </tr>
                        <tr>
                            <th>City</th>
                            <td><input class="form-control" id="locality" name="locality" disabled="true" /></td>
                        </tr>
                        <tr>
                            <th>Province</th>
                            <td><input class="form-control" id="administrative_area_level_1" name="administrative_area_level_1" disabled="true" /></td>
                        </tr>
                        <tr hidden>
                            <th>Zip Code</th>
                            <td><input class="form-control" id="postal_code" name="postal_code" disabled="true" /></td>
                        </tr>
                        <tr hidden>
                            <th>Country</th>
                            <td><input class="form-control" id="country" name="country" disabled="true" /></td>
                        </tr>
                        <tr>
                            <th>Latitude</th>
                            <td><input class="form-control" id="Latitude" name="Latitude" /></td>
                        </tr>
                        <tr>
                            <th>Longitude</th>
                            <td><input class="form-control" id="Longitude" name="Longitude"  /></td>
                        </tr>
                    </table>
                </div>
                <input type="submit" value="Save" class="btn btn-success " />
                
                </div>
            </div>
        </div>
 }         @*@section Scripts {
                    @Scripts.Render("~/bundles/jqueryval")*@
                <script>


                    // This sample uses the Autocomplete widget to help the user select a
                    // place, then it retrieves the address components associated with that
                    // place, and then it populates the form fields with those details.
                    // This sample requires the Places library. Include the libraries=places
                    // parameter when you first load the API. For example:
                    // <script
                    // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

                    var placeSearch, autocomplete;

                    var componentForm = {
                        street_number: 'short_name',
                        route: 'long_name',
                        locality: 'long_name',
                        administrative_area_level_1: 'long_name',
                        country: 'long_name',
                        postal_code: 'short_name'
                    };

                    function initAutocomplete() {
                        // Create the autocomplete object, restricting the search predictions to
                        // geographical location types.
                        autocomplete = new google.maps.places.Autocomplete(
                            document.getElementById('autocomplete'), { types: ['geocode'] });

                        // Avoid paying for data that you don't need by restricting the set of
                        // place fields that are returned to just the address components.
                        autocomplete.setFields(['address_component']);

                        // When the user selects an address from the drop-down, populate the
                        // address fields in the form.
                        autocomplete.addListener('place_changed', fillInAddress);
                    }

                    function fillInAddress() {
                        // Get the place details from the autocomplete object.
                        var place = autocomplete.getPlace();

                        for (var component in componentForm) {
                            document.getElementById(component).value = '';
                            document.getElementById(component).disabled = false;
                        }

                        // Get each component of the address from the place details,
                        // and then fill-in the corresponding field on the form.
                        for (var i = 0; i < place.address_components.length; i++) {
                            var addressType = place.address_components[i].types[0];
                            if (componentForm[addressType]) {
                                var val = place.address_components[i][componentForm[addressType]];
                                document.getElementById(addressType).value = val;
                            }
                        }

                        var geocoder = new google.maps.Geocoder();
                        geocoder.geocode({
                            "address": document.getElementById('autocomplete').value
                        }, function (results) {
                            if (results) {
                                document.getElementById('Latitude').value = results[0].geometry.location.lat();
                                document.getElementById('Longitude').value = results[0].geometry.location.lng();
                            }
                        });
                    }

                    // Bias the autocomplete object to the user's geographical location,
                    // as supplied by the browser's 'navigator.geolocation' object.
                    function geolocate() {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(function (position) {
                                var geolocation = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                var circle = new google.maps.Circle(
                                    { center: geolocation, radius: position.coords.accuracy });
                                autocomplete.setBounds(circle.getBounds());
                            });
                        }
                    }


                </script>
                <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3_a5_AojMlkp0nRiOfluHO6_qaYbtL3o&libraries=places&callback=initAutocomplete"
                        async defer></script>

